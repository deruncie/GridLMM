// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "GridLMM_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// chol_c
MatrixXd chol_c(Map<MatrixXd> X);
RcppExport SEXP _GridLMM_chol_c(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_c(X));
    return rcpp_result_gen;
END_RCPP
}
// premultiply_list_of_matrices
Rcpp::List premultiply_list_of_matrices(MSpMat Qt, Rcpp::List X_list);
RcppExport SEXP _GridLMM_premultiply_list_of_matrices(SEXP QtSEXP, SEXP X_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MSpMat >::type Qt(QtSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X_list(X_listSEXP);
    rcpp_result_gen = Rcpp::wrap(premultiply_list_of_matrices(Qt, X_list));
    return rcpp_result_gen;
END_RCPP
}
// chol_update
MatrixXd chol_update(MatrixXd L, MatrixXd X, int sign);
RcppExport SEXP _GridLMM_chol_update(SEXP LSEXP, SEXP XSEXP, SEXP signSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type L(LSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type sign(signSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_update(L, X, sign));
    return rcpp_result_gen;
END_RCPP
}
// chol_dropRows
MatrixXd chol_dropRows(Map<MatrixXd> L, int start_row, int num_rows);
RcppExport SEXP _GridLMM_chol_dropRows(SEXP LSEXP, SEXP start_rowSEXP, SEXP num_rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type start_row(start_rowSEXP);
    Rcpp::traits::input_parameter< int >::type num_rows(num_rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_dropRows(L, start_row, num_rows));
    return rcpp_result_gen;
END_RCPP
}
// crossprod_cholR
MatrixXd crossprod_cholR(Map<MatrixXd> chol_R, Map<MatrixXd> X);
RcppExport SEXP _GridLMM_crossprod_cholR(SEXP chol_RSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type chol_R(chol_RSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(crossprod_cholR(chol_R, X));
    return rcpp_result_gen;
END_RCPP
}
// F_hats
MatrixXd F_hats(Map<MatrixXd> beta_hats, Map<MatrixXd> RSSs, Map<MatrixXd> V_star_L, int n, int b, int m);
RcppExport SEXP _GridLMM_F_hats(SEXP beta_hatsSEXP, SEXP RSSsSEXP, SEXP V_star_LSEXP, SEXP nSEXP, SEXP bSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type beta_hats(beta_hatsSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type RSSs(RSSsSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type V_star_L(V_star_LSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(F_hats(beta_hats, RSSs, V_star_L, n, b, m));
    return rcpp_result_gen;
END_RCPP
}
// log_det_of_XtX
VectorXd log_det_of_XtX(Map<MatrixXd> X_cov, Rcpp::List X_tests, ArrayXi X_indices);
RcppExport SEXP _GridLMM_log_det_of_XtX(SEXP X_covSEXP, SEXP X_testsSEXP, SEXP X_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type X_cov(X_covSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X_tests(X_testsSEXP);
    Rcpp::traits::input_parameter< ArrayXi >::type X_indices(X_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(log_det_of_XtX(X_cov, X_tests, X_indices));
    return rcpp_result_gen;
END_RCPP
}
// GridLMM_SS_dense_c
Rcpp::List GridLMM_SS_dense_c(Map<MatrixXd> Y, Map<MatrixXd> inv_chol_Vi_transpose, Map<MatrixXd> X_cov, Rcpp::List X_tests, ArrayXi X_indices, VectorXd inv_prior_X, double V_log_det);
RcppExport SEXP _GridLMM_GridLMM_SS_dense_c(SEXP YSEXP, SEXP inv_chol_Vi_transposeSEXP, SEXP X_covSEXP, SEXP X_testsSEXP, SEXP X_indicesSEXP, SEXP inv_prior_XSEXP, SEXP V_log_detSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type inv_chol_Vi_transpose(inv_chol_Vi_transposeSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type X_cov(X_covSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X_tests(X_testsSEXP);
    Rcpp::traits::input_parameter< ArrayXi >::type X_indices(X_indicesSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type inv_prior_X(inv_prior_XSEXP);
    Rcpp::traits::input_parameter< double >::type V_log_det(V_log_detSEXP);
    rcpp_result_gen = Rcpp::wrap(GridLMM_SS_dense_c(Y, inv_chol_Vi_transpose, X_cov, X_tests, X_indices, inv_prior_X, V_log_det));
    return rcpp_result_gen;
END_RCPP
}
// GridLMM_SS_sparse_c
Rcpp::List GridLMM_SS_sparse_c(Map<MatrixXd> Y, MSpMat inv_chol_Vi_transpose, Map<MatrixXd> X_cov, Rcpp::List X_tests, ArrayXi X_indices, VectorXd inv_prior_X, double V_log_det);
RcppExport SEXP _GridLMM_GridLMM_SS_sparse_c(SEXP YSEXP, SEXP inv_chol_Vi_transposeSEXP, SEXP X_covSEXP, SEXP X_testsSEXP, SEXP X_indicesSEXP, SEXP inv_prior_XSEXP, SEXP V_log_detSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MSpMat >::type inv_chol_Vi_transpose(inv_chol_Vi_transposeSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type X_cov(X_covSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X_tests(X_testsSEXP);
    Rcpp::traits::input_parameter< ArrayXi >::type X_indices(X_indicesSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type inv_prior_X(inv_prior_XSEXP);
    Rcpp::traits::input_parameter< double >::type V_log_det(V_log_detSEXP);
    rcpp_result_gen = Rcpp::wrap(GridLMM_SS_sparse_c(Y, inv_chol_Vi_transpose, X_cov, X_tests, X_indices, inv_prior_X, V_log_det));
    return rcpp_result_gen;
END_RCPP
}
// GridLMM_SS_downdate
Rcpp::List GridLMM_SS_downdate(Map<MatrixXd> Y, Map<MatrixXd> V_inv, Map<MatrixXd> X_cov, Rcpp::List X_tests, VectorXd inv_prior_X, Rcpp::List downdate_weights, Rcpp::List downdate_Xs, ArrayXi X_indices, double V_log_det);
RcppExport SEXP _GridLMM_GridLMM_SS_downdate(SEXP YSEXP, SEXP V_invSEXP, SEXP X_covSEXP, SEXP X_testsSEXP, SEXP inv_prior_XSEXP, SEXP downdate_weightsSEXP, SEXP downdate_XsSEXP, SEXP X_indicesSEXP, SEXP V_log_detSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type V_inv(V_invSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type X_cov(X_covSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X_tests(X_testsSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type inv_prior_X(inv_prior_XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type downdate_weights(downdate_weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type downdate_Xs(downdate_XsSEXP);
    Rcpp::traits::input_parameter< ArrayXi >::type X_indices(X_indicesSEXP);
    Rcpp::traits::input_parameter< double >::type V_log_det(V_log_detSEXP);
    rcpp_result_gen = Rcpp::wrap(GridLMM_SS_downdate(Y, V_inv, X_cov, X_tests, inv_prior_X, downdate_weights, downdate_Xs, X_indices, V_log_det));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GridLMM_chol_c", (DL_FUNC) &_GridLMM_chol_c, 1},
    {"_GridLMM_premultiply_list_of_matrices", (DL_FUNC) &_GridLMM_premultiply_list_of_matrices, 2},
    {"_GridLMM_chol_update", (DL_FUNC) &_GridLMM_chol_update, 3},
    {"_GridLMM_chol_dropRows", (DL_FUNC) &_GridLMM_chol_dropRows, 3},
    {"_GridLMM_crossprod_cholR", (DL_FUNC) &_GridLMM_crossprod_cholR, 2},
    {"_GridLMM_F_hats", (DL_FUNC) &_GridLMM_F_hats, 6},
    {"_GridLMM_log_det_of_XtX", (DL_FUNC) &_GridLMM_log_det_of_XtX, 3},
    {"_GridLMM_GridLMM_SS_dense_c", (DL_FUNC) &_GridLMM_GridLMM_SS_dense_c, 7},
    {"_GridLMM_GridLMM_SS_sparse_c", (DL_FUNC) &_GridLMM_GridLMM_SS_sparse_c, 7},
    {"_GridLMM_GridLMM_SS_downdate", (DL_FUNC) &_GridLMM_GridLMM_SS_downdate, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_GridLMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
