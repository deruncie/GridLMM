// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "GridLMM_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// svd_c
Rcpp::List svd_c(Map<MatrixXd> X);
RcppExport SEXP _GridLMM_svd_c(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(svd_c(X));
    return rcpp_result_gen;
END_RCPP
}
// chol_c
MatrixXd chol_c(Map<MatrixXd> X);
RcppExport SEXP _GridLMM_chol_c(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_c(X));
    return rcpp_result_gen;
END_RCPP
}
// premultiply_list_of_matrices
Rcpp::List premultiply_list_of_matrices(SEXP Qt_, Rcpp::List X_list);
RcppExport SEXP _GridLMM_premultiply_list_of_matrices(SEXP Qt_SEXP, SEXP X_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Qt_(Qt_SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X_list(X_listSEXP);
    rcpp_result_gen = Rcpp::wrap(premultiply_list_of_matrices(Qt_, X_list));
    return rcpp_result_gen;
END_RCPP
}
// chol_update_L
MatrixXd chol_update_L(MatrixXd L, MatrixXd X, VectorXd weights);
RcppExport SEXP _GridLMM_chol_update_L(SEXP LSEXP, SEXP XSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type L(LSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_update_L(L, X, weights));
    return rcpp_result_gen;
END_RCPP
}
// chol_update
MatrixXd chol_update(MatrixXd L, MatrixXd X, int sign);
RcppExport SEXP _GridLMM_chol_update(SEXP LSEXP, SEXP XSEXP, SEXP signSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type L(LSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type sign(signSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_update(L, X, sign));
    return rcpp_result_gen;
END_RCPP
}
// chol_dropRows
MatrixXd chol_dropRows(Map<MatrixXd> L, int start_row, int num_rows);
RcppExport SEXP _GridLMM_chol_dropRows(SEXP LSEXP, SEXP start_rowSEXP, SEXP num_rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type start_row(start_rowSEXP);
    Rcpp::traits::input_parameter< int >::type num_rows(num_rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_dropRows(L, start_row, num_rows));
    return rcpp_result_gen;
END_RCPP
}
// crossprod_cholR
MatrixXd crossprod_cholR(Map<MatrixXd> chol_R, Map<MatrixXd> X);
RcppExport SEXP _GridLMM_crossprod_cholR(SEXP chol_RSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type chol_R(chol_RSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(crossprod_cholR(chol_R, X));
    return rcpp_result_gen;
END_RCPP
}
// F_hats
MatrixXd F_hats(Map<MatrixXd> beta_hats, Map<MatrixXd> RSSs, Map<MatrixXd> V_star_L, int n, int b, int m);
RcppExport SEXP _GridLMM_F_hats(SEXP beta_hatsSEXP, SEXP RSSsSEXP, SEXP V_star_LSEXP, SEXP nSEXP, SEXP bSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type beta_hats(beta_hatsSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type RSSs(RSSsSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type V_star_L(V_star_LSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(F_hats(beta_hats, RSSs, V_star_L, n, b, m));
    return rcpp_result_gen;
END_RCPP
}
// log_det_of_XtX
VectorXd log_det_of_XtX(Map<MatrixXd> X_cov, Rcpp::List X_tests, ArrayXi X_indices);
RcppExport SEXP _GridLMM_log_det_of_XtX(SEXP X_covSEXP, SEXP X_testsSEXP, SEXP X_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type X_cov(X_covSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X_tests(X_testsSEXP);
    Rcpp::traits::input_parameter< ArrayXi >::type X_indices(X_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(log_det_of_XtX(X_cov, X_tests, X_indices));
    return rcpp_result_gen;
END_RCPP
}
// GridLMM_SS_matrix
Rcpp::List GridLMM_SS_matrix(Map<MatrixXd> Y, SEXP chol_Vi_R_, Map<MatrixXd> X_cov, Rcpp::List X_list_, ArrayXi X_indices, VectorXd inv_prior_X);
RcppExport SEXP _GridLMM_GridLMM_SS_matrix(SEXP YSEXP, SEXP chol_Vi_R_SEXP, SEXP X_covSEXP, SEXP X_list_SEXP, SEXP X_indicesSEXP, SEXP inv_prior_XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< SEXP >::type chol_Vi_R_(chol_Vi_R_SEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type X_cov(X_covSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X_list_(X_list_SEXP);
    Rcpp::traits::input_parameter< ArrayXi >::type X_indices(X_indicesSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type inv_prior_X(inv_prior_XSEXP);
    rcpp_result_gen = Rcpp::wrap(GridLMM_SS_matrix(Y, chol_Vi_R_, X_cov, X_list_, X_indices, inv_prior_X));
    return rcpp_result_gen;
END_RCPP
}
// build_downdate_Xs
Rcpp::List build_downdate_Xs(IntegerVector RE_index, Rcpp::List X_list_, Rcpp::List proximal_markers, IntegerVector active_X_list);
RcppExport SEXP _GridLMM_build_downdate_Xs(SEXP RE_indexSEXP, SEXP X_list_SEXP, SEXP proximal_markersSEXP, SEXP active_X_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type RE_index(RE_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X_list_(X_list_SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type proximal_markers(proximal_markersSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type active_X_list(active_X_listSEXP);
    rcpp_result_gen = Rcpp::wrap(build_downdate_Xs(RE_index, X_list_, proximal_markers, active_X_list));
    return rcpp_result_gen;
END_RCPP
}
// GridLMM_SS_downdate_matrix
Rcpp::List GridLMM_SS_downdate_matrix(Map<MatrixXd> Y, MatrixXd chol_Vi_R, Map<MatrixXd> X_cov, Rcpp::List X_list_, ArrayXi X_indices, Rcpp::List downdate_Xs, VectorXd downdate_weights, VectorXd inv_prior_X);
RcppExport SEXP _GridLMM_GridLMM_SS_downdate_matrix(SEXP YSEXP, SEXP chol_Vi_RSEXP, SEXP X_covSEXP, SEXP X_list_SEXP, SEXP X_indicesSEXP, SEXP downdate_XsSEXP, SEXP downdate_weightsSEXP, SEXP inv_prior_XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type chol_Vi_R(chol_Vi_RSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type X_cov(X_covSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X_list_(X_list_SEXP);
    Rcpp::traits::input_parameter< ArrayXi >::type X_indices(X_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type downdate_Xs(downdate_XsSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type downdate_weights(downdate_weightsSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type inv_prior_X(inv_prior_XSEXP);
    rcpp_result_gen = Rcpp::wrap(GridLMM_SS_downdate_matrix(Y, chol_Vi_R, X_cov, X_list_, X_indices, downdate_Xs, downdate_weights, inv_prior_X));
    return rcpp_result_gen;
END_RCPP
}
// Calculate_qt_LASSO
VectorXd Calculate_qt_LASSO(Map<MatrixXd> X, Map<MatrixXd> beta, Map<VectorXd> lambdas);
RcppExport SEXP _GridLMM_Calculate_qt_LASSO(SEXP XSEXP, SEXP betaSEXP, SEXP lambdasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Map<VectorXd> >::type lambdas(lambdasSEXP);
    rcpp_result_gen = Rcpp::wrap(Calculate_qt_LASSO(X, beta, lambdas));
    return rcpp_result_gen;
END_RCPP
}
// chol_update2
MatrixXd chol_update2(MatrixXd L, MatrixXd X, int sign);
RcppExport SEXP _GridLMM_chol_update2(SEXP LSEXP, SEXP XSEXP, SEXP signSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type L(LSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type sign(signSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_update2(L, X, sign));
    return rcpp_result_gen;
END_RCPP
}
// chol_update2s
MatrixXd chol_update2s(MatrixXd L, MatrixXd X, int sign);
RcppExport SEXP _GridLMM_chol_update2s(SEXP LSEXP, SEXP XSEXP, SEXP signSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type L(LSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type sign(signSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_update2s(L, X, sign));
    return rcpp_result_gen;
END_RCPP
}
